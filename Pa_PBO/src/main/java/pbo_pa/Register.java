/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pbo_pa;
import pbo_pa.Koneksi;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 *
 * @author Lenovo
 */
public class Register extends javax.swing.JFrame {
private final Koneksi koneksi= new Koneksi();
    /**
     * Creates new form Register
     */
    public Register() {
        initComponents();
    }
private String generateRandomKodePendaftaran() {
    int length = 4;
    String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    StringBuilder kode_pendaftaran = new StringBuilder();

    for (int i = 0; i < length; i++) {
        int randomIndex = (int) (Math.random() * characters.length());
        kode_pendaftaran.append(characters.charAt(randomIndex));
    }

    return kode_pendaftaran.toString();
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtnik = new javax.swing.JTextField();
        txtnama = new javax.swing.JTextField();
        txtno_telp = new javax.swing.JTextField();
        txtemail = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("NIK");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 60, -1));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("nama");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 150, -1, -1));

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("no_telp");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 190, 60, -1));

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semibold", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("email");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 230, 70, -1));
        getContentPane().add(txtnik, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 180, -1));
        getContentPane().add(txtnama, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 180, -1));
        getContentPane().add(txtno_telp, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 190, 180, -1));
        getContentPane().add(txtemail, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 230, 180, -1));

        jButton1.setText("simpan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 280, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "modern", "tradisional" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 280, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\Lenovo\\OneDrive\\Pictures\\Screenshots\\menu register.png")); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

         try {
        
        if (txtnik.getText().isEmpty() || txtnama.getText().isEmpty() || txtno_telp.getText().isEmpty() || txtemail.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Semua kolom harus diisi.", "Error", JOptionPane.ERROR_MESSAGE);
            return; 
        }

        Connection conn = koneksi.KoneksiDB();
        if (conn != null) {
            String nik = txtnik.getText();
            String nama = txtnama.getText();
            String no_telp = txtno_telp.getText();
            String email = txtemail.getText();
            String userType = (String) jComboBox1.getSelectedItem();

           
            String kode_pendaftaran = generateRandomKodePendaftaran();

           
            String queryInsertAnggota = "INSERT INTO anggota (nik, nama, no_telp, email) VALUES (?, ?, ?, ?)";
            PreparedStatement preparedStatementAnggota = conn.prepareStatement(queryInsertAnggota);
            preparedStatementAnggota.setString(1, nik);
            preparedStatementAnggota.setString(2, nama);
            preparedStatementAnggota.setString(3, no_telp);
            preparedStatementAnggota.setString(4, email);

            int rowsInsertedAnggota = preparedStatementAnggota.executeUpdate();
                if (rowsInsertedAnggota > 0) {
                String updatejumlahanggota = "";
                if (userType.equalsIgnoreCase("modern")) {
                    updatejumlahanggota= "UPDATE tari SET jumlah_anggota = jumlah_anggota + 1 WHERE id = 'M111'";
                   
                } else if (userType.equalsIgnoreCase("tradisional")) {
                    updatejumlahanggota = "UPDATE tari SET jumlah_anggota = jumlah_anggota + 1 WHERE id = 'T111'";
                }
                
                Statement statement = conn.createStatement();
                statement.executeUpdate(updatejumlahanggota);
                }
                  String instrukturId = "";
                 if (userType.equalsIgnoreCase("modern")) {
                     instrukturId = "M101";
                 } else if (userType.equalsIgnoreCase("tradisional")) {
                     instrukturId = "T101";
                 }
                 
                  String idTari = "";
               if (userType.equalsIgnoreCase("modern")) {
                   idTari = "M111";
               } else if (userType.equalsIgnoreCase("tradisional")) {
                   idTari = "T111";
               }

                 String queryInsertBuktiDaftar = "INSERT INTO bukti_daftar (anggota_nik, kode_pendaftaran,tanggal_mendaftar,instruktur_tari_id_instruktur,tari_id) VALUES (?, ?, ?, ? ,?)";
                PreparedStatement preparedStatementBuktiDaftar = conn.prepareStatement(queryInsertBuktiDaftar);
                preparedStatementBuktiDaftar.setString(1, nik);
                preparedStatementBuktiDaftar.setString(2, kode_pendaftaran);
            
                java.util.Date today = new java.util.Date();
                java.sql.Timestamp waktuPendaftaran = new java.sql.Timestamp(today.getTime());
                preparedStatementBuktiDaftar.setTimestamp(3, waktuPendaftaran);
                preparedStatementBuktiDaftar.setString(4, instrukturId);
                 preparedStatementBuktiDaftar.setString(5, idTari);
                  int rowsInsertedBuktiDaftar = preparedStatementBuktiDaftar.executeUpdate();

                if (rowsInsertedAnggota > 0 && rowsInsertedBuktiDaftar > 0) {
                    String successMessage = "Pendaftaran berhasil. Kode Pendaftaran Anda: " + kode_pendaftaran;
                    JOptionPane.showMessageDialog(null, successMessage, "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Pendaftaran gagal. Silakan coba lagi.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Tidak dapat terhubung ke database.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error during database connection: " + e.getMessage());
        }


        Login login = new Login();
        login.setVisible(true);
        this.dispose();
    
        
    }//GEN-LAST:event_jButton1ActionPerformed

  
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Register().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtemail;
    private javax.swing.JTextField txtnama;
    private javax.swing.JTextField txtnik;
    private javax.swing.JTextField txtno_telp;
    // End of variables declaration//GEN-END:variables


private String getIdTariByJenkoisTari(Connection conn, String jenis_tari) {
    String idTari = null;
    try {
        String query = "SELECT id FROM tari WHERE jenis_tari = ?";
        PreparedStatement preparedStatement = conn.prepareStatement(query);
        preparedStatement.setString(1, jenis_tari);
        ResultSet resultSet = preparedStatement.executeQuery();
        if (resultSet.next()) {
            idTari = resultSet.getString("id");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while getting id_tari: " + e.getMessage());
    }
    return idTari;
}

private String getInstructorByID(Connection conn, String id_instruktur) {
    String nama = null;
    try {
        String query = "SELECT nama FROM instruktur_tari WHERE id_instruktur = ?";
        PreparedStatement preparedStatement = conn.prepareStatement(query);
        preparedStatement.setString(1, id_instruktur);
        ResultSet resultSet = preparedStatement.executeQuery();
        if (resultSet.next()) {
            nama = resultSet.getString("nama");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while getting instruktur name: " + e.getMessage());
    }
    return nama;
}
private String getInstrukturIdByJenisTari(Connection conn, String jenisTari) {
    String instrukturId = null;
    try {
        String query = "SELECT instruktur_id FROM tari_instruktur WHERE jenis_tari = ?";
        PreparedStatement preparedStatement = conn.prepareStatement(query);
        preparedStatement.setString(1, jenisTari);
        ResultSet resultSet = preparedStatement.executeQuery();
        if (resultSet.next()) {
            instrukturId = resultSet.getString("instruktur_id");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error while getting instruktur ID: " + e.getMessage());
    }
    return instrukturId;
}
}